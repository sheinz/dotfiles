set nocompatible

" Enable python3 support only if the variable is passed as command line
if exists('python3_support')
    py3 3
endif

" Vundle plugins configuration {{{
set rtp+=~/.vim/bundle/Vundle.vim/
call vundle#begin()

" let Vundle manage Vundle
" required!
Plugin 'gmarik/Vundle.vim'
if !has("win32unix")
    if !exists('python3_support')
       Plugin 'Valloric/YouCompleteMe'
    endif
endif
Plugin 'scrooloose/nerdtree'
Plugin 'klen/python-mode'
Plugin 'tpope/vim-fugitive'
Plugin 'tpope/vim-unimpaired'
Plugin 'tpope/vim-dispatch'
Plugin 'ctrlpvim/ctrlp.vim'
Plugin 'vim-airline/vim-airline'
Plugin 'vim-airline/vim-airline-themes'
Plugin 'majutsushi/tagbar'
Plugin 'SirVer/ultisnips'
Plugin 'honza/vim-snippets'
Plugin 'tomtom/tcomment_vim'
Plugin 'tpope/vim-surround'
Plugin 'christoomey/vim-tmux-navigator'
" Plugin 'jiangmiao/auto-pairs'
Plugin 'nfvs/vim-perforce'
Plugin 'vim-scripts/a.vim'
" Plugin 'vim-scripts/YankRing.vim'
Plugin 'godlygeek/tabular'
Plugin 'plasticboy/vim-markdown'

" This plugin requires 'livedown'
" To install it: `npm install -g livedown`
Plugin 'shime/vim-livedown'
call vundle#end()
" }}}

set nocompatible
filetype plugin indent on
set rtp+=~/dotfiles/vim-runtime/

set encoding=utf-8

" Change leader key and specify timeout for it
let mapleader=","

" NERDTree configuration {{{
nnoremap <leader>f :NERDTreeToggle<CR>
nnoremap <leader>g :TagbarToggle<CR>
if has("win32unix")
    let g:NERDTreeDirArrows=0
    let g:NERDTreeWinSize=50
endif
" }}}

" Display buffers and select
" nmap <C-b> :buffers<CR>:buffer<Space>
" Delete current buffer and go to the next one
nnoremap ]d :bnext<CR>:bdelete #<CR>

" General indentation settings
set tabstop=4
set shiftwidth=4
set expandtab
set colorcolumn=80

" Make backspace act normaly
set backspace=indent,eol,start

" Load project specific vimrc file
set exrc

" Show statusline even if only one window is open
set laststatus=2

" Show both relative numbers and absolute number
set relativenumber
set number

set timeoutlen=500

" Show trailing whitepace
" autocmd ColorScheme * highlight ExtraWhitespace ctermbg=red guibg=red
" command CheckSpaces match ExtraWhitespace /\s\+$/
" command RemoveTrailingSpaces %s/\s\+$//g

" Check spelling for English
command CheckSpell setlocal spell! spelllang=en_us
nnoremap <leader>s :CheckSpell<CR>

" Look for tag def in a "tags" file in the dir of the current file, then for
" that same file in every folder above the folder of the current file, until the
" root.
set tags=./tags;/

" Generate tags for the current project
command GenCtags !ctags -R --exclude=".git"

" Switch modified buffers
set hidden

" case insensitive searching
set ignorecase
" but become case sensitive if you type uppercase characters
set smartcase

" Enhanced tab complition of command line arguments
set wildmenu

set nohlsearch " do not highlight searched-for phrases
set incsearch " ...but do highlight-as-I-type the search string

" Make mouse work in tmux
set mouse=a

" Clipboard configurationn {{{
if has('unnamedplus')
  " By default, Vim will not use the system clipboard when yanking/pasting to
  " the default register. This option makes Vim use the system default
  " clipboard.
  " Note that on X11, there are _two_ system clipboards: the "standard" one, and
  " the selection/mouse-middle-click one. Vim sees the standard one as register
  " '+' (and this option makes Vim use it by default) and the selection one as
  " '*'.
  " See :h 'clipboard' for details.
  set clipboard=unnamedplus,unnamed
else
  " Vim now also uses the selection system clipboard for default yank/paste.
  set clipboard+=unnamed
endif
" }}}

" Grep a word under cursor in the current directory
nnoremap gr :grep -Rw <cword> *<CR>
set grepprg=grep\ -Rn

" Fugitive mappings ---------------- {{{
nnoremap <leader>gs :Gstatus<CR>
" }}}

" Remove trailing whitespaces ----------- {{{
autocmd BufWrite * :call RemoveTrailingSpaces()
function! RemoveTrailingSpaces()
    execute "normal mz"
    %s/\s\+$//ge
    execute "normal `z"
endfunction
" }}}

" Open my vimrc in a split
:nnoremap <leader>ev :vsplit $MYVIMRC<cr>

" Auto word highlight ----------------- {{{
" Highlight all instances of word under cursor, when idle.
" Useful when studying strange source code.
" Type z/ to toggle highlighting on/off.
nnoremap z/ :if AutoHighlightToggle()<Bar>set hls<Bar>endif<CR>
function! AutoHighlightToggle()
  let @/ = ''
  if exists('#auto_highlight')
    au! auto_highlight
    augroup! auto_highlight
    setl updatetime=4000
    echo 'Highlight current word: off'
    return 0
  else
    augroup auto_highlight
      au!
      au CursorHold * let @/ = '\V\<'.escape(expand('<cword>'), '\').'\>'
    augroup end
    setl updatetime=500
    echo 'Highlight current word: ON'
    return 1
  endif
endfunction
" }}}

" ctrlp ------------------ {{{
let g:ctrlp_map = '<leader>p'
" Jump to already opened window only if it is in the current tab.
let g:ctrlp_switch_buffer = 'et'
nnoremap <c-b> :CtrlPBuffer<cr>
nnoremap <leader>b :CtrlPBuffer<cr>
" }}}

" Airline -------------------- {{{
let g:airline_theme = 'molokai'
let g:airline_detect_spell = 1
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#tab_nr_type = 1 " display tab number
" show tabline only if more then one tab is open
let g:airline#extensions#tabline#tab_min_count = 0
let g:airline#extensions#tabline#buffer_min_count = 2
let g:airline#extensions#tabline#show_close_button = 0
" To use powerline fonts inastall them from https://github.com/powerline/fonts
let g:airline_powerline_fonts=1
nnoremap <leader>1 1gt
nnoremap <leader>2 2gt
nnoremap <leader>3 3gt
nnoremap <leader>4 4gt
nnoremap <leader>5 5gt
nnoremap <leader>6 6gt
nnoremap <leader>7 7gt
nnoremap <leader>8 8gt
nnoremap <leader>9 9gt
nnoremap <leader>c :tabnew<cr>
nnoremap <leader>n :tabnext<cr>
nnoremap <leader>x :tabclose<cr>
" }}}

" UltiSnips --------------------- {{{
let g:UltiSnipsExpandTrigger = "<tab>"
let g:UltiSnipsJumpForwardTrigger = "<tab>"
let g:UltiSnipsJumpBackwardTrigger = "<s-tab>"
let g:UltiSnipsListSnippets = "<leader><tab>"
let g:UltiSnipsSnippetsDir="~/dotfiles/vim-runtime/UltiSnips"
" }}}

" Yankring configuration --------------------- {{{
" let g:yankring_history_dir = '$HOME/tmp/vim'
" this is so that single char deletes don't end up in the yankring
let g:yankring_min_element_length = 2
let g:yankring_window_height = 14
nnoremap <leader>r :YRShow<CR>

" this makes Y yank from the cursor to the end of the line, which makes more
" sense than the default of yanking the whole current line (we can use yy for
" that)
function! YRRunAfterMaps()
    nnoremap Y   :<C-U>YRYankCount 'y$'<CR>
endfunction

"fix for yankring and neovim
let g:yankring_clipboard_monitor=0
" }}}

" Color Scheme -------------- {{{
syntax on
colorscheme desert
if has('gui_running')
    if has("gui_gtk2")
        set guifont=Ubuntu\ Mono\ derivative\ powerline\ 12
        set guioptions-=m  " Remove menu bar
        set guioptions-=T  " Remove toolbar
    else
        set guifont=Consolas:h11
    endif
    " Start maximized
    set columns=999 lines=999
endif
" }}}

" YouCompleteMe configuration ------------- {{{
nnoremap <C-h> :A<CR>
nnoremap <C-g> "fyiw:A<CR>/<C-r>f<CR>

command Fix YcmCompleter FixIt<CR>

" search path for source/header switching
let g:alternateSearchPath = 'sfr:./private,sfr:..,../src,sfr:../include,sfr:../inc'

let g:ycm_server_python_interpreter = '/usr/bin/python'
nnoremap <leader>d :YcmCompleter GoToDefinition<CR>
nnoremap <leader>k :YcmCompleter GetDoc<CR>
nnoremap <leader>t :YcmCompleter GetType<CR>
nnoremap <leader>i :YcmCompleter GoToInclude<CR>
let g:ycm_autoclose_preview_window_after_completion = 1
let g:ycm_global_ycm_extra_conf = '~/.vim/ycm_extra_conf.py'

" Disable tab as completion key
let g:ycm_key_list_select_completion=[]
let g:ycm_key_list_previous_completion=[]

if !has("win32unix")
    autocmd FileType c nnoremap <buffer> <silent> <C-]> :YcmCompleter GoTo<CR>
    autocmd FileType cpp nnoremap <buffer> <silent> <C-]> :YcmCompleter GoTo<CR>
endif
" }}}

" Python mode -------------- {{{
" Activate rope
" Keys:
" K             Show python docs
" <Ctrl-Space>  Rope autocomplete
" <Ctrl-c>g     Rope goto definition
" <Ctrl-c>d     Rope show documentation
" <Ctrl-c>f     Rope find occurrences
" <Leader>b     Set, unset breakpoint (g:pymode_breakpoint enabled)
" [[            Jump on previous class or function (normal, visual, operator modes)
" ]]            Jump on next class or function (normal, visual, operator modes)
" [M            Jump on previous class or method (normal, visual, operator modes)
" ]M            Jump on next class or method (normal, visual, operator modes)
let g:pymode_python = 'python3'
let g:pymode_rope = 1
let g:pymode_rope_completion = 1
let g:pymode_rope_complete_on_dot = 0

" Documentation
let g:pymode_doc = 1
let g:pymode_doc_key = 'K'

" My custom bindings
" let g:pymode_rope_goto_definition_bind = '<C-]>'
autocmd FileType python nnoremap <buffer> <silent> <C-]> :YcmCompleter GoTo<CR>

let g:pymode_lint_checker = "pyflakes,pep8"
" Auto check on save
let g:pymode_lint_write = 1

" Support virtualenv
let g:pymode_virtualenv = 1

" Enable breakpoints plugin
let g:pymode_breakpoint = 1
let g:pymode_breakpoint_key = '<leader>b'

" syntax highlighting
let g:pymode_syntax = 1
let g:pymode_syntax_all = 1
let g:pymode_syntax_indent_errors = g:pymode_syntax_all
let g:pymode_syntax_space_errors = g:pymode_syntax_all

" Don't autofold code
let g:pymode_folding = 0

let g:pymode_run_key = '<leader>R'

" Use longer long line warning for pep8
let g:pymode_lint_options_pep8 = {'max_line_length': 120}
" }}}

" Auto close preview window after completion is done
autocmd CompleteDone * pclose

" Do not fold by default
set nofoldenable
set foldmethod=syntax
autocmd FileType vim set foldmethod=marker

if has("win32unix")
    " Block cursor in cygwin
    let &t_ti.="\e[1 q"
    let &t_SI.="\e[5 q"
    let &t_EI.="\e[1 q"
    let &t_te.="\e[0 q"
endif

" Prevent unsafe commands from running in project specific vimrc
set secure
